package be.intecbrussel.opdrachten;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;

public class FileIOOpdracht4 {

    static Path originalDirectory = Paths.get("C:/Users/Joris/Data/unsorted");
    static File[] files = new File(String.valueOf(originalDirectory)).listFiles();
    static List<String> content = new ArrayList<>();


    public static void main(String[] args) {


        Path summaryFile = originalDirectory.resolve("summary.txt");
        content.add("name    |    " + "Writeable     |     "  + "Readable      |");

        File[] files = new File(String.valueOf(originalDirectory)).listFiles();
        showAllFiles(files);
        // check files for
        // scan files for extension
        // create map based on extension
        // put files with that extension in the right map
        // create summary map with overview


        try {
            Files.write(summaryFile,content, Charset.defaultCharset(), StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }

        content.forEach(System.out:: println);

    }


    public static void showAllFiles(File[] files) {
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    System.out.println("Directory: " + file.getName());
                    showAllFiles(file.listFiles()); // Calls same method again.
                } else {
                    System.out.println("File: " + file.getName());

                    if (file.getName().contains(".")) {
                        try {
                            Path newDirectory = Path.of(originalDirectory + "/" + file.getName().substring(file.getName().lastIndexOf(".") + 1));
                            Files.createDirectories(newDirectory);
                            Files.move(Path.of(file.getAbsolutePath()), Path.of(newDirectory + File.separator + file.getName()));

                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                boolean isWritable = file.setWritable(true);
                boolean isReadadble = file.setReadable(true);

                content.add(file.getName()+ ":" + "Writeable: "+ isWritable  + "|" + "Readable: "+isReadadble);

            }
        }
    }



}
